{"version":3,"sources":["load_.js"],"names":["load_","file","variables","deps","loader","System","constructor","config","v","k","set","import"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,KAAf,CAAqBC,IAArB,EAA2BC,SAA3B,EAAsCC,IAAtC,EAA4C;AACxC,MAAIC,MAAM,GAAG,IAAIC,kBAAOC,WAAX,EAAb;;AAEA,MAAIJ,SAAJ,EAAe;AACXE,IAAAA,MAAM,CAACG,MAAP,CAAc;AAAC,gBAAUL;AAAX,KAAd;AACH;;AAED,MAAIC,IAAJ,EAAU;AACN,wBAAMA,IAAN,EAAY,CAACK,CAAD,EAAIC,CAAJ,KAAU;AAClBL,MAAAA,MAAM,CAACM,GAAP,CAAWD,CAAX,EAAcD,CAAd;AACH,KAFD;AAGH;;AAED,SAAO,MAAMJ,MAAM,CAACO,MAAP,CAAcV,IAAd,CAAb;AACH;;eAEcD,K","sourcesContent":["import System from 'systemjs';\nimport _each from 'lodash/each';\n\n/**\n * Load a js file in sand box.\n * @param {string} file - Source file\n * @param {object} [variables] - Variables as global\n * @param {object} [deps] - Dependencies\n * @returns {AsyncFunction.<*>}\n */\nasync function load_(file, variables, deps) {    \n    let loader = new System.constructor();\n\n    if (variables) {\n        loader.config({'global': variables});\n    }\n\n    if (deps) {\n        _each(deps, (v, k) => {\n            loader.set(k, v);\n        });\n    }\n\n    return await loader.import(file);\n}\n\nexport default load_;\n"]}