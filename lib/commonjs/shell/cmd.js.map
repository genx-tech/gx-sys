{"version":3,"sources":["cmd.js"],"names":["run_","cmd","options","Promise","resolve","reject","childProcess","exec","windowsHide","error","stdout","stderr","result","runLive_","args","onStdOut","onStdErr","ps","spawn","e","on","code","runSync","execSync","toString"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD,EAAMC,OAAN;AAAA,SAChB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,WACRC,uBAAaC,IAAb,CACIN,GADJ;AAEMO,MAAAA,WAAW,EAAE;AAFnB,OAE4BN,OAF5B,GAGI,UAACO,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,EAA2B;AACvB,UAAIF,KAAJ,EAAW;AACP,eAAOJ,MAAM,CAACI,KAAD,CAAb;AACH;;AAED,UAAIG,MAAM,GAAG;AAAEF,QAAAA,MAAM,EAANA,MAAF;AAAUC,QAAAA,MAAM,EAANA;AAAV,OAAb;AAEA,aAAOP,OAAO,CAACQ,MAAD,CAAd;AACH,KAXL,CADQ;AAAA,GAAZ,CADgB;AAAA,CAAb;AAiBP;AACA;AACA;AACA;AACA;AACA;;;;;AACO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACZ,GAAD,EAAMa,IAAN,EAAYC,QAAZ,EAAsBC,QAAtB,EAAgCd,OAAhC;AAAA,SACpB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7B,QAAIY,EAAE,GAAGX,uBAAaY,KAAb,CAAmBjB,GAAnB,EAAwBa,IAAxB;AACLN,MAAAA,WAAW,EAAE;AADR,OAEFN,OAFE,EAAT;;AAIA,QAAIiB,CAAJ;;AAEA,QAAIJ,QAAJ,EAAc;AACVE,MAAAA,EAAE,CAACP,MAAH,CAAUU,EAAV,CAAa,MAAb,EAAqBL,QAArB;AACH;;AAED,QAAIC,QAAJ,EAAc;AACVC,MAAAA,EAAE,CAACN,MAAH,CAAUS,EAAV,CAAa,MAAb,EAAqBJ,QAArB;AACH;;AAEDC,IAAAA,EAAE,CAACG,EAAH,CAAM,OAAN,EAAe,UAACC,IAAD;AAAA,aAAWF,CAAC,GAAGd,MAAM,CAACc,CAAD,CAAT,GAAef,OAAO,CAACiB,IAAD,CAAlC;AAAA,KAAf;AACAJ,IAAAA,EAAE,CAACG,EAAH,CAAM,OAAN,EAAe,UAACX,KAAD,EAAW;AACtBU,MAAAA,CAAC,GAAGV,KAAJ;AACH,KAFD;AAGH,GAnBD,CADoB;AAAA,CAAjB;AAsBP;AACA;AACA;AACA;AACA;;;;;AACO,IAAMa,OAAO,GAAG,SAAVA,OAAU,CAACrB,GAAD,EAAMC,OAAN;AAAA,SACnBI,uBAAaiB,QAAb,CAAsBtB,GAAtB;AAA6BO,IAAAA,WAAW,EAAE;AAA1C,KAAmDN,OAAnD,GAA8DsB,QAA9D,EADmB;AAAA,CAAhB","sourcesContent":["import childProcess from 'child_process';\n\n/**\n * Execute a shell command.\n * @param {string} cmd - Command line to execute\n * @param {object} options\n * @returns {Promise.<Object>}\n */\nexport const run_ = (cmd, options) =>\n    new Promise((resolve, reject) =>\n        childProcess.exec(\n            cmd,\n            { windowsHide: true, ...options },\n            (error, stdout, stderr) => {\n                if (error) {\n                    return reject(error);\n                }\n\n                let result = { stdout, stderr };\n\n                return resolve(result);\n            }\n        )\n    );\n\n/**\n * Execute a shell command and lively output\n * @param {string} cmd - Command line to execute\n * @param {Array} [args] - Arguments list\n * @returns {Promise.<Object>}\n */\nexport const runLive_ = (cmd, args, onStdOut, onStdErr, options) =>\n    new Promise((resolve, reject) => {\n        let ps = childProcess.spawn(cmd, args, {\n            windowsHide: true,\n            ...options,\n        });\n        let e;\n\n        if (onStdOut) {\n            ps.stdout.on('data', onStdOut);\n        }\n\n        if (onStdErr) {\n            ps.stderr.on('data', onStdErr);\n        }\n\n        ps.on('close', (code) => (e ? reject(e) : resolve(code)));\n        ps.on('error', (error) => {\n            e = error;\n        });\n    });\n\n/**\n * Execute a shell command synchronously\n * @param {string} cmd - Command line to execute\n * @returns {string}\n */\nexport const runSync = (cmd, options) =>\n    childProcess.execSync(cmd, { windowsHide: true, ...options }).toString();\n"]}