{"version":3,"names":["childProcess","run_","cmd","options","Promise","resolve","reject","exec","windowsHide","error","stdout","stderr","result","runLive_","args","onStdOut","onStdErr","ps","spawn","e","on","data","console","log","toString","code","runSync","execSync"],"sources":["cmd.js"],"sourcesContent":["import childProcess from 'child_process';\n\n/**\n * Execute a shell command.\n * @function module:cmd.run_\n * @param {string} cmd - Command line to execute\n * @param {object} options\n * @returns {Promise.<Object>}\n */\nexport const run_ = (cmd, options) =>\n    new Promise((resolve, reject) =>\n        childProcess.exec(\n            cmd,\n            { windowsHide: true, ...options },\n            (error, stdout, stderr) => {\n                if (error) {\n                    return reject(error);\n                }\n\n                let result = { stdout, stderr };\n\n                return resolve(result);\n            }\n        )\n    );\n\n/**\n * Execute a shell command and lively output\n * @function module:cmd.runLive_\n * @param {string} cmd - Command line to execute\n * @param {Array} [args] - Arguments list *\n * @param {*} onStdOut -\n * @param {*} onStdErr\n * @param {*} options\n * @returns {Promise.<Object>}\n */\nexport const runLive_ = (cmd, args, onStdOut, onStdErr, options) =>\n    new Promise((resolve, reject) => {\n        let ps = childProcess.spawn(cmd, args, {\n            windowsHide: true,\n            ...options,\n        });\n        let e;\n\n        if (onStdOut) {\n            ps.stdout.on('data', onStdOut);\n            onStdErr ??= onStdOut;\n        } else {\n            ps.stdout.on('data', (data) => console.log(data.toString()));\n        }\n\n        if (onStdErr) {\n            ps.stderr.on('data', onStdErr);\n        } else {\n            ps.stderr.on('data', (data) => console.error(data.toString()));\n        }\n\n        ps.on('close', (code) => (e ? reject(e) : resolve(code)));\n        ps.on('error', (error) => {\n            e = error;\n        });\n    });\n\n/**\n * Execute a shell command synchronously\n * @function module:cmd.runSync\n * @param {string} cmd - Command line to execute\n * @returns {string}\n */\nexport const runSync = (cmd, options) =>\n    childProcess.execSync(cmd, { windowsHide: true, ...options }).toString();\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,eAAe;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,GAAG,CAACC,GAAG,EAAEC,OAAO,KAC7B,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KACxBN,YAAY,CAACO,IAAI,CACbL,GAAG,EACH;EAAEM,WAAW,EAAE,IAAI;EAAE,GAAGL;AAAQ,CAAC,EACjC,CAACM,KAAK,EAAEC,MAAM,EAAEC,MAAM,KAAK;EACvB,IAAIF,KAAK,EAAE;IACP,OAAOH,MAAM,CAACG,KAAK,CAAC;EACxB;EAEA,IAAIG,MAAM,GAAG;IAAEF,MAAM;IAAEC;EAAO,CAAC;EAE/B,OAAON,OAAO,CAACO,MAAM,CAAC;AAC1B,CAAC,CACJ,CACJ;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACX,GAAG,EAAEY,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,EAAEb,OAAO,KAC3D,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC7B,IAAIW,EAAE,GAAGjB,YAAY,CAACkB,KAAK,CAAChB,GAAG,EAAEY,IAAI,EAAE;IACnCN,WAAW,EAAE,IAAI;IACjB,GAAGL;EACP,CAAC,CAAC;EACF,IAAIgB,CAAC;EAEL,IAAIJ,QAAQ,EAAE;IACVE,EAAE,CAACP,MAAM,CAACU,EAAE,CAAC,MAAM,EAAEL,QAAQ,CAAC;IAC9BC,QAAQ,KAAKD,QAAQ;EACzB,CAAC,MAAM;IACHE,EAAE,CAACP,MAAM,CAACU,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAKC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,QAAQ,EAAE,CAAC,CAAC;EAChE;EAEA,IAAIR,QAAQ,EAAE;IACVC,EAAE,CAACN,MAAM,CAACS,EAAE,CAAC,MAAM,EAAEJ,QAAQ,CAAC;EAClC,CAAC,MAAM;IACHC,EAAE,CAACN,MAAM,CAACS,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAKC,OAAO,CAACb,KAAK,CAACY,IAAI,CAACG,QAAQ,EAAE,CAAC,CAAC;EAClE;EAEAP,EAAE,CAACG,EAAE,CAAC,OAAO,EAAGK,IAAI,IAAMN,CAAC,GAAGb,MAAM,CAACa,CAAC,CAAC,GAAGd,OAAO,CAACoB,IAAI,CAAE,CAAC;EACzDR,EAAE,CAACG,EAAE,CAAC,OAAO,EAAGX,KAAK,IAAK;IACtBU,CAAC,GAAGV,KAAK;EACb,CAAC,CAAC;AACN,CAAC,CAAC;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMiB,OAAO,GAAG,CAACxB,GAAG,EAAEC,OAAO,KAChCH,YAAY,CAAC2B,QAAQ,CAACzB,GAAG,EAAE;EAAEM,WAAW,EAAE,IAAI;EAAE,GAAGL;AAAQ,CAAC,CAAC,CAACqB,QAAQ,EAAE"}