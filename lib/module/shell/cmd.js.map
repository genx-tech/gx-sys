{"version":3,"names":["childProcess","run_","cmd","options","Promise","resolve","reject","exec","windowsHide","error","stdout","stderr","result","runLive_","args","onStdOut","onStdErr","ps","spawn","e","on","data","console","log","toString","code","runSync","execSync"],"sources":["cmd.js"],"sourcesContent":["import childProcess from 'child_process';\n\n/**\n * Execute a shell command.\n * @function module:cmd.run_\n * @param {string} cmd - Command line to execute\n * @param {object} options\n * @returns {Promise.<Object>}\n */\nexport const run_ = (cmd, options) =>\n    new Promise((resolve, reject) =>\n        childProcess.exec(\n            cmd,\n            { windowsHide: true, ...options },\n            (error, stdout, stderr) => {\n                if (error) {\n                    return reject(error);\n                }\n\n                let result = { stdout, stderr };\n\n                return resolve(result);\n            }\n        )\n    );\n\n/**\n * Execute a shell command and lively output\n * @function module:cmd.runLive_\n * @param {string} cmd - Command line to execute\n * @param {Array} [args] - Arguments list *\n * @param {*} onStdOut -\n * @param {*} onStdErr\n * @param {*} options\n * @returns {Promise.<Object>}\n */\nexport const runLive_ = (cmd, args, onStdOut, onStdErr, options) =>\n    new Promise((resolve, reject) => {\n        let ps = childProcess.spawn(cmd, args, {\n            windowsHide: true,\n            ...options,\n        });\n        let e;\n\n        if (onStdOut) {\n            ps.stdout.on('data', onStdOut);\n            onStdErr ??= onStdOut;\n        } else {\n            ps.stdout.on('data', (data) => console.log(data.toString()));\n        }\n\n        if (onStdErr) {\n            ps.stderr.on('data', onStdErr);\n        } else {\n            ps.stderr.on('data', (data) => console.error(data.toString()));\n        }\n\n        ps.on('close', (code) => (e ? reject(e) : resolve(code)));\n        ps.on('error', (error) => {\n            e = error;\n        });\n    });\n\n/**\n * Execute a shell command synchronously\n * @function module:cmd.runSync\n * @param {string} cmd - Command line to execute\n * @returns {string}\n */\nexport const runSync = (cmd, options) =>\n    childProcess.execSync(cmd, { windowsHide: true, ...options }).toString();\n"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,IAAI,GAAG,CAACC,GAAD,EAAMC,OAAN,KAChB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KACRN,YAAY,CAACO,IAAb,CACIL,GADJ,EAEI;EAAEM,WAAW,EAAE,IAAf;EAAqB,GAAGL;AAAxB,CAFJ,EAGI,CAACM,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,KAA2B;EACvB,IAAIF,KAAJ,EAAW;IACP,OAAOH,MAAM,CAACG,KAAD,CAAb;EACH;;EAED,IAAIG,MAAM,GAAG;IAAEF,MAAF;IAAUC;EAAV,CAAb;EAEA,OAAON,OAAO,CAACO,MAAD,CAAd;AACH,CAXL,CADJ,CADG;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACX,GAAD,EAAMY,IAAN,EAAYC,QAAZ,EAAsBC,QAAtB,EAAgCb,OAAhC,KACpB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC7B,IAAIW,EAAE,GAAGjB,YAAY,CAACkB,KAAb,CAAmBhB,GAAnB,EAAwBY,IAAxB,EAA8B;IACnCN,WAAW,EAAE,IADsB;IAEnC,GAAGL;EAFgC,CAA9B,CAAT;EAIA,IAAIgB,CAAJ;;EAEA,IAAIJ,QAAJ,EAAc;IACVE,EAAE,CAACP,MAAH,CAAUU,EAAV,CAAa,MAAb,EAAqBL,QAArB;IACAC,QAAQ,KAAKD,QAAb;EACH,CAHD,MAGO;IACHE,EAAE,CAACP,MAAH,CAAUU,EAAV,CAAa,MAAb,EAAsBC,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,QAAL,EAAZ,CAA/B;EACH;;EAED,IAAIR,QAAJ,EAAc;IACVC,EAAE,CAACN,MAAH,CAAUS,EAAV,CAAa,MAAb,EAAqBJ,QAArB;EACH,CAFD,MAEO;IACHC,EAAE,CAACN,MAAH,CAAUS,EAAV,CAAa,MAAb,EAAsBC,IAAD,IAAUC,OAAO,CAACb,KAAR,CAAcY,IAAI,CAACG,QAAL,EAAd,CAA/B;EACH;;EAEDP,EAAE,CAACG,EAAH,CAAM,OAAN,EAAgBK,IAAD,IAAWN,CAAC,GAAGb,MAAM,CAACa,CAAD,CAAT,GAAed,OAAO,CAACoB,IAAD,CAAjD;EACAR,EAAE,CAACG,EAAH,CAAM,OAAN,EAAgBX,KAAD,IAAW;IACtBU,CAAC,GAAGV,KAAJ;EACH,CAFD;AAGH,CAxBD,CADG;AA2BP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMiB,OAAO,GAAG,CAACxB,GAAD,EAAMC,OAAN,KACnBH,YAAY,CAAC2B,QAAb,CAAsBzB,GAAtB,EAA2B;EAAEM,WAAW,EAAE,IAAf;EAAqB,GAAGL;AAAxB,CAA3B,EAA8DqB,QAA9D,EADG"}